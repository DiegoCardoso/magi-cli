#!/usr/bin/env node
'use strict';

const program = require('commander');
program
  .arguments('<fromVersion> <toVersion>')
  .option('--auth', 'Ask and replace saved GitHub authentication credentials')
  .parse(process.argv);

const {run, workingPackage} = require('../lib/tools.js');
const {getGitHubApi} = require('../lib/github-api.js');

async function main() {
  const gh = await getGitHubApi(program.auth);

  if (program.args.length < 2) {
    throw 'not enough arguments, expected <fromVersion> <toVersion>';
  }

  const [fromVersion, toVersion] = program.args;
  const milestoneTitle = toVersion.replace(/^v/, '');

  const [user, repo] = workingPackage.repository.split('/');
  const issues = gh.getIssues(user, repo);

  // Fetch complete milestones array
  const milestones = (await issues._requestAllPages(
    `/repos/${user}/${repo}/milestones`,
    {state: 'all'}
  )).data;

  // Find or create new milestone
  const milestone = milestones.find((milestone) => milestone.title === milestoneTitle) ||
    (await issues.createMilestone({title: milestoneTitle, state: 'closed'})).data;

  // If milestone is open â€” close it
  if (milestone.state === 'open') {
    (await issues.editMilestone(milestone.number, {state: 'closed'})).data;
  }

  // Extract merged pull request numbers from merge commits log
  const mergeTitles = await run(`git log --merges --pretty=format:"%s" ${fromVersion}..${toVersion}`);
  const pullRequestNumbers = mergeTitles.split('\n')
    .map(line => line.replace(/^Merge pull request #(\d+) .*/, '$1'))
    .map(n => Number.parseInt(n))
    .filter(n => !Number.isNaN(n));

  await Promise.all(
    pullRequestNumbers.map(async pullRequestNumber => {
      // NOTE: We stop using release number milestone for issues in favour
      // of project milestones, as agreed on 1 Feb 2018.
      //
      // Get pull request data
      // const pullRequest = (await issues.getIssue(pullRequestNumber)).data;

      // // Find fixed issues in the pull request body
      // const issueNumbers = pullRequest.body
      //   .split('\n')
      //   .filter(line => /^fixes /i.test(line))
      //   .reduce((numbers, tokenLine) => numbers.concat(
      //     (tokenLine.match(/ #\d+/g) || [])
      //       .map(match => Number.parseInt(match.replace(' #', '')))
      //       .filter(n => !Number.isNaN(n))
      //   ), []);
      //
      //
      // // Set milestone on all the fixed issues
      // await Promise.all(issueNumbers.map(issueNumber =>
      //   issues.editIssue(issueNumber, {milestone: milestone.number})
      // ));

      // Set milestone on the pull request
      await issues.editIssue(pullRequestNumber, {milestone: milestone.number});
    })
  );

  console.log(milestone.html_url + '?closed=1');
}

main(...program.args)
  .then(() => process.exit(0))
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });
